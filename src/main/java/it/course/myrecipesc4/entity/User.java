package it.course.myrecipesc4.entity;
// Generated 2 mar 2021, 16:59:05 by Hibernate Tools 3.5.0.Final

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import it.course.myrecipesc4.entity.audit.DateAudit;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "myrecipesc4", uniqueConstraints = { @UniqueConstraint(columnNames = "email"),
		@UniqueConstraint(columnNames = "nickname") })
public class User extends DateAudit implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	
	private long userId;
	private String nickname;
	private String email;
	private String password;
	private boolean enabled = true;
	
	private Set<UserRecipeImage> userRecipeImages = new HashSet<UserRecipeImage>(0);
	private Set<Rating> ratings = new HashSet<Rating>(0);
	private Set<Recipe> favorites = new HashSet<Recipe>(0);
	private Set<Comment> comments = new HashSet<Comment>(0);
	private Set<Authority> authorities = new HashSet<Authority>(0);
	
	@ManyToMany(fetch=FetchType.EAGER)
	@JoinTable(name="USER_AUTHORITIES",
		joinColumns = {@JoinColumn(name="user_id", referencedColumnName="user_id")},
		inverseJoinColumns = {@JoinColumn(name="authority_id", referencedColumnName="id")})
	public Set<Authority> getAuthorities() {
		return this.authorities;
	}
	
	public User() {
	}
	
	public User(String nickname, String email, String password) {
		super();
		this.nickname = nickname;
		this.email = email;
		this.password = password;
	}

	public User(long userId, String nickname, String email, String password, boolean enabled) {
		this.userId = userId;
		this.nickname = nickname;
		this.email = email;
		this.password = password;
		this.enabled = enabled;
	}

	public User(long userId, String nickname, String email, String password, boolean enabled, Set<UserRecipeImage> userRecipeImages, Set<Rating> ratings, Set<Recipe> recipes_1, Set<Comment> comments, Set<Authority> authorities) {
		this.userId = userId;
		this.nickname = nickname;
		this.email = email;
		this.password = password;
		this.enabled = enabled;
		this.userRecipeImages = userRecipeImages;
		this.ratings = ratings;
		this.favorites = recipes_1;
		this.comments = comments;
		this.authorities = authorities;
	}

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "user_id", unique = true, nullable = false)
	public long getUserId() {
		return this.userId;
	}

	public void setUserId(long userId) {
		this.userId = userId;
	}

	@Column(name = "nickname", unique = true, nullable = false, length = 45)
	public String getNickname() {
		return this.nickname;
	}

	public void setNickname(String nickname) {
		this.nickname = nickname;
	}

	@Column(name = "email", unique = true, nullable = false, length = 45)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "password", nullable = false, length = 100)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "enabled", nullable = false)
	public boolean getEnabled() {
		return this.enabled;
	}

	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserRecipeImage> getUserRecipeImages() {
		return this.userRecipeImages;
	}

	public void setUserRecipeImages(Set<UserRecipeImage> userRecipeImages) {
		this.userRecipeImages = userRecipeImages;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Rating> getRatings() {
		return this.ratings;
	}

	public void setRatings(Set<Rating> ratings) {
		this.ratings = ratings;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "favorites", catalog = "myrecipesc4", joinColumns = {
			@JoinColumn(name = "user_user_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "recipe_recipe_id", nullable = false, updatable = false) })
	public Set<Recipe> getRecipes_1() {
		return this.favorites;
	}

	public void setRecipes_1(Set<Recipe> recipes_1) {
		this.favorites = recipes_1;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Comment> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}
	
	public void setAuthorities(Set<Authority> authorities) {
		this.authorities = authorities;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (int) (userId ^ (userId >>> 32));
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		if (userId != other.userId)
			return false;
		return true;
	}
	
}
