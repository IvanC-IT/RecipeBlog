package it.course.myrecipesc4.entity;
// Generated 2 mar 2021, 16:59:05 by Hibernate Tools 3.5.0.Final

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import it.course.myrecipesc4.entity.audit.UserDateAudit;
import lombok.Getter;
import lombok.Setter;

/**
 * Recipe generated by hbm2java
 */
@Entity
@Table(name = "recipe", catalog = "myrecipesc4")
@Getter @Setter 
public class Recipe extends UserDateAudit implements Serializable{

	private static final long serialVersionUID = 1L;
	
	private long recipeId;
	private Chef chef;
	private String recipeName;
	private Short calories;
	private String difficulty;
	private String dose;
	private short preparation;
	private Short cooking;
	private String cost;
	private String notes;
	private String overview;
	private String content;
	private byte[] image;
	private boolean healthy;
	private Set<Comment> comments = new HashSet<Comment>(0);
	private Set<Rating> ratings = new HashSet<Rating>(0);
	private Set<RecipeHasIngredient> recipeHasIngredients = new HashSet<RecipeHasIngredient>(0);
	private Set<Tag> tags = new HashSet<Tag>(0);
	private Set<UserRecipeImage> userRecipeImages = new HashSet<UserRecipeImage>(0);
	private Set<User> users = new HashSet<User>(0);

	public Recipe() {
	}

	public Recipe(long recipeId, Chef chef, String recipeName, String difficulty, String dose,
			short preparation, String cost, String overview, String content, byte[] image, boolean healthy) {
		this.recipeId = recipeId;
		this.chef = chef;
		this.recipeName = recipeName;
		this.difficulty = difficulty;
		this.dose = dose;
		this.preparation = preparation;
		this.cost = cost;
		this.overview = overview;
		this.content = content;
		this.image = image;
		this.healthy = healthy;
	}

	public Recipe(long recipeId, Chef chef, User user, String recipeName, Short calories, String difficulty,
			String dose, short preparation, Short cooking, String cost, String notes, String overview, String content,
			byte[] image, boolean healthy, Set<Comment> comments, Set<Rating> ratings,
			Set<RecipeHasIngredient> recipeHasIngredients, Set<Tag> tags, Set<UserRecipeImage> userRecipeImages,
			Set<User> users) {
		this.recipeId = recipeId;
		this.chef = chef;
		this.recipeName = recipeName;
		this.calories = calories;
		this.difficulty = difficulty;
		this.dose = dose;
		this.preparation = preparation;
		this.cooking = cooking;
		this.cost = cost;
		this.notes = notes;
		this.overview = overview;
		this.content = content;
		this.image = image;
		this.healthy = healthy;
		this.comments = comments;
		this.ratings = ratings;
		this.recipeHasIngredients = recipeHasIngredients;
		this.tags = tags;
		this.userRecipeImages = userRecipeImages;
		this.users = users;
	}

	public Recipe(Chef chef, String recipeName, Short calories, String difficulty, String dose, short preparation,
			Short cooking, String cost, String notes, String overview, String content,
			boolean healthy) {
		super();
		this.chef = chef;
		this.recipeName = recipeName;
		this.calories = calories;
		this.difficulty = difficulty;
		this.dose = dose;
		this.preparation = preparation;
		this.cooking = cooking;
		this.cost = cost;
		this.notes = notes;
		this.overview = overview;
		this.content = content;
		this.healthy = healthy;
	}
	
	

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "recipe_id", unique = true, nullable = false)
	public long getRecipeId() {
		return this.recipeId;
	}

	public void setRecipeId(long recipeId) {
		this.recipeId = recipeId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "chef_id", nullable = false)
	public Chef getChef() {
		return this.chef;
	}

	public void setChef(Chef chef) {
		this.chef = chef;
	}

	@Column(name = "recipe_name", nullable = false, length = 45)
	public String getRecipeName() {
		return this.recipeName;
	}

	public void setRecipeName(String recipeName) {
		this.recipeName = recipeName;
	}

	@Column(name = "calories")
	public Short getCalories() {
		return this.calories;
	}

	public void setCalories(Short calories) {
		this.calories = calories;
	}

	@Column(name = "difficulty", nullable = false, length = 10)
	public String getDifficulty() {
		return this.difficulty;
	}

	public void setDifficulty(String difficulty) {
		this.difficulty = difficulty;
	}

	@Column(name = "dose", nullable = false, length = 45)
	public String getDose() {
		return this.dose;
	}

	public void setDose(String dose) {
		this.dose = dose;
	}

	@Column(name = "preparation", nullable = false)
	public short getPreparation() {
		return this.preparation;
	}

	public void setPreparation(short preparation) {
		this.preparation = preparation;
	}

	@Column(name = "cooking")
	public Short getCooking() {
		return this.cooking;
	}

	public void setCooking(Short cooking) {
		this.cooking = cooking;
	}

	@Column(name = "cost", nullable = false, length = 6)
	public String getCost() {
		return this.cost;
	}

	public void setCost(String cost) {
		this.cost = cost;
	}

	@Column(name = "notes", length = 45)
	public String getNotes() {
		return this.notes;
	}

	public void setNotes(String notes) {
		this.notes = notes;
	}

	@Column(name = "overview", nullable = false)
	public String getOverview() {
		return this.overview;
	}

	public void setOverview(String overview) {
		this.overview = overview;
	}

	@Column(name = "content", nullable = false, columnDefinition="TEXT")
	public String getContent() {
		return this.content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	@Column(name = "image", nullable = false)
	public byte[] getImage() {
		return this.image;
	}

	public void setImage(byte[] image) {
		this.image = image;
	}


	@Column(name = "healthy", nullable = false)
	public boolean isHealthy() {
		return this.healthy;
	}

	public void setHealthy(boolean healthy) {
		this.healthy = healthy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "recipe")
	public Set<Comment> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "recipe")
	public Set<Rating> getRatings() {
		return this.ratings;
	}

	public void setRatings(Set<Rating> ratings) {
		this.ratings = ratings;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "recipe")
	public Set<RecipeHasIngredient> getRecipeHasIngredients() {
		return this.recipeHasIngredients;
	}

	public void setRecipeHasIngredients(Set<RecipeHasIngredient> recipeHasIngredients) {
		this.recipeHasIngredients = recipeHasIngredients;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "recipe_has_tag", catalog = "myrecipesc4", joinColumns = {
			@JoinColumn(name = "recipe_recipe_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "tag_tag_id", nullable = false, updatable = false) })
	public Set<Tag> getTags() {
		return this.tags;
	}

	public void setTags(Set<Tag> tags) {
		this.tags = tags;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "recipe")
	public Set<UserRecipeImage> getUserRecipeImages() {
		return this.userRecipeImages;
	}

	public void setUserRecipeImages(Set<UserRecipeImage> userRecipeImages) {
		this.userRecipeImages = userRecipeImages;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "favorites", catalog = "myrecipesc4", joinColumns = {
			@JoinColumn(name = "recipe_recipe_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "user_user_id", nullable = false, updatable = false) })
	public Set<User> getUsers() {
		return this.users;
	}

	public void setUsers(Set<User> users) {
		this.users = users;
	}


	
}
